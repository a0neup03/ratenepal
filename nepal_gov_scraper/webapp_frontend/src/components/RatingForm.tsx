import React, { useState, useEffect } from 'react';
import { testRating } from '../services/api';
import { ServiceStatus } from '../types';

interface RatingFormProps {
  visitId: number;
  waitMinutes: number;
  serviceStatus: ServiceStatus;
  officeName: string;
  onSubmitComplete: () => void;
}

const RatingForm: React.FC<RatingFormProps> = ({ 
  visitId, 
  waitMinutes, 
  serviceStatus, 
  officeName,
  onSubmitComplete 
}) => {
  const [ratings, setRatings] = useState({
    overall_rating: 0,
    staff_behavior_rating: 0,
    office_cleanliness_rating: 0,
    process_efficiency_rating: 0,
    information_clarity_rating: 0,
  });

  const [booleanAnswers, setBooleanAnswers] = useState({
    asked_for_bribe: null as boolean | null,
    staff_helpful: null as boolean | null,
    process_clear: null as boolean | null,
    documents_sufficient: null as boolean | null,
    would_recommend: null as boolean | null,
  });

  const [textFeedback, setTextFeedback] = useState({
    wait_reason: '',
    suggestions: '',
    complaints: '',
  });

  const [submitting, setSubmitting] = useState(false);

  // Nepali questions with English translations
  const nepaliQuestions = [
    {
      id: 'asked_for_bribe',
      question_nepali: '‡§ï‡•á ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡§æ‡§à ‡§ò‡•Å‡§∏ ‡§Æ‡§æ‡§ó‡•ç‡§Ø‡•ã?',
      question_english: 'Did they ask for a bribe?',
      critical: true
    },
    {
      id: 'staff_helpful', 
      question_nepali: '‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§∏‡§π‡§Ø‡•ã‡§ó‡•Ä ‡§∞ ‡§µ‡§ø‡§®‡§Æ‡•ç‡§∞ ‡§•‡§ø‡§è?',
      question_english: 'Were the staff helpful and polite?',
      critical: false
    },
    {
      id: 'process_clear',
      question_nepali: '‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞ ‡§¨‡•Å‡§ù‡•ç‡§® ‡§∏‡§ú‡§ø‡§≤‡•ã ‡§•‡§ø‡§Ø‡•ã?', 
      question_english: 'Was the process clear and easy to understand?',
      critical: false
    },
    {
      id: 'documents_sufficient',
      question_nepali: '‡§§‡§™‡§æ‡§à‡§Ç‡§∏‡§Å‡§ó ‡§≠‡§è‡§ï‡§æ ‡§ï‡§æ‡§ó‡§ú‡§æ‡§§ ‡§™‡•Å‡§ó‡•á?',
      question_english: 'Were your documents sufficient?',
      critical: false
    },
    {
      id: 'would_recommend',
      question_nepali: '‡§ï‡•á ‡§§‡§™‡§æ‡§à‡§Ç ‡§Ø‡•ã ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§≤‡§æ‡§à ‡§Ö‡§∞‡•Ç‡§≤‡§æ‡§à ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?',
      question_english: 'Would you recommend this office to others?',
      critical: false
    },
  ];

  const waitReasonOptions = [
    { id: 'lunch_break', nepali: '‡§ñ‡§æ‡§ú‡§æ ‡§∏‡§Æ‡§Ø', english: 'Lunch break' },
    { id: 'system_down', nepali: '‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§¨‡§ø‡§ó‡•ç‡§∞‡§ø‡§Ø‡•ã', english: 'Computer/system down' },
    { id: 'staff_absent', nepali: '‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä ‡§Ö‡§®‡•Å‡§™‡§∏‡•ç‡§•‡§ø‡§§', english: 'Staff absent' },
    { id: 'long_queue', nepali: '‡§≤‡§æ‡§Æ‡•ã ‡§≤‡§æ‡§á‡§®', english: 'Long queue' },
    { id: 'document_issue', nepali: '‡§ï‡§æ‡§ó‡§ú‡§æ‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', english: 'Document issues' },
    { id: 'payment_issue', nepali: '‡§≠‡•Å‡§ï‡•ç‡§§‡§æ‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ', english: 'Payment issues' },
    { id: 'verification', nepali: '‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£', english: 'Verification process' },
    { id: 'other', nepali: '‡§Ö‡§®‡•ç‡§Ø', english: 'Other' },
  ];

  const handleRatingChange = (category: string, rating: number) => {
    setRatings(prev => ({ ...prev, [category]: rating }));
  };

  const handleBooleanChange = (questionId: string, answer: boolean | null) => {
    setBooleanAnswers(prev => ({ ...prev, [questionId]: answer }));
  };

  const handleSubmit = async () => {
    // Validate required ratings
    const requiredRatings = Object.values(ratings);
    if (requiredRatings.some(rating => rating === 0)) {
      alert('‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§¨‡•à ‡§∞‡•á‡§ü‡§ø‡§ô‡•ç‡§ó‡§π‡§∞‡•Ç ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ (Please provide all ratings.)');
      return;
    }

    setSubmitting(true);

    try {
      // Call test rating API
      const response = await testRating();
      
      // Simulate form submission delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      alert('‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§´‡§ø‡§°‡§¨‡•ç‡§Ø‡§æ‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•á‡§∂ ‡§ó‡§∞‡§ø‡§Ø‡•ã‡•§\n(Thank you! Your feedback has been submitted successfully.)');
      onSubmitComplete();
      
    } catch (error) {
      console.error('Error submitting rating:', error);
      alert('‡§´‡§ø‡§°‡§¨‡•ç‡§Ø‡§æ‡§ï ‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡§ø‡§è‡§®‡•§ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ (Could not submit feedback. Please try again.)');
    } finally {
      setSubmitting(false);
    }
  };

  const renderStarRating = (category: string, label: string, labelNepali: string) => {
    const currentRating = ratings[category as keyof typeof ratings];
    
    return (
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          {labelNepali} ({label})
        </label>
        <div className="flex space-x-1">
          {[1, 2, 3, 4, 5].map((star) => (
            <button
              key={star}
              type="button"
              onClick={() => handleRatingChange(category, star)}
              className={`text-2xl ${
                star <= currentRating ? 'text-yellow-400' : 'text-gray-300'
              } hover:text-yellow-400 transition-colors`}
            >
              ‚≠ê
            </button>
          ))}
        </div>
        <div className="text-xs text-gray-500 mt-1">
          {currentRating > 0 ? `${currentRating} ‡§§‡§æ‡§∞‡§æ‡§π‡§∞‡•Ç (${currentRating} stars)` : '‡§∞‡•á‡§ü‡§ø‡§ô ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç'}
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">
        üìù ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§∞‡•á‡§ü‡§ø‡§ô ‡§∞ ‡§´‡§ø‡§°‡§¨‡•ç‡§Ø‡§æ‡§ï (Experience Rating & Feedback)
      </h2>

      {/* Visit Summary */}
      <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
        <h3 className="font-bold text-blue-800">{officeName}</h3>
        <div className="mt-2 text-sm text-blue-700">
          <p>‚è±Ô∏è ‡§ï‡•Å‡§≤ ‡§∏‡§Æ‡§Ø: {waitMinutes} ‡§Æ‡§ø‡§®‡•á‡§ü (Total time: {waitMinutes} minutes)</p>
          <p>üìä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: {serviceStatus === ServiceStatus.SUCCESS ? '‚úÖ ‡§ï‡§æ‡§Æ ‡§≠‡§Ø‡•ã (Successful)' : '‚ùå ‡§ï‡§æ‡§Æ ‡§≠‡§è‡§® (Failed)'}</p>
        </div>
      </div>

      <div className="grid md:grid-cols-2 gap-8">
        {/* Left Column: Star Ratings */}
        <div>
          <h3 className="text-lg font-bold text-gray-800 mb-4">
            ‚≠ê ‡§∞‡•á‡§ü‡§ø‡§ô‡•ç‡§ó‡§π‡§∞‡•Ç (Ratings)
          </h3>
          
          {renderStarRating('overall_rating', 'Overall Experience', '‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§Ö‡§®‡•Å‡§≠‡§µ')}
          {renderStarRating('staff_behavior_rating', 'Staff Behavior', '‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞')}
          {renderStarRating('office_cleanliness_rating', 'Office Cleanliness', '‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§ï‡•ã ‡§∏‡§´‡§æ‡§à')}
          {renderStarRating('process_efficiency_rating', 'Process Efficiency', '‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ï‡•ã ‡§¶‡§ï‡•ç‡§∑‡§§‡§æ')}
          {renderStarRating('information_clarity_rating', 'Information Clarity', '‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ')}
        </div>

        {/* Right Column: Nepali Questions */}
        <div>
          <h3 className="text-lg font-bold text-gray-800 mb-4">
            ‚ùì ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§π‡§∞‡•Ç (Questions)
          </h3>

          {nepaliQuestions.map((question) => (
            <div key={question.id} className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <span className={question.critical ? 'text-red-600 font-bold' : ''}>
                  {question.question_nepali}
                </span>
                <br />
                <span className="text-xs text-gray-500">
                  {question.question_english}
                </span>
              </label>
              
              <div className="flex space-x-4">
                <button
                  type="button"
                  onClick={() => handleBooleanChange(question.id, true)}
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                    booleanAnswers[question.id as keyof typeof booleanAnswers] === true
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-200 text-gray-700 hover:bg-green-200'
                  }`}
                >
                  ‚úÖ ‡§õ / Yes
                </button>
                
                <button
                  type="button"
                  onClick={() => handleBooleanChange(question.id, false)}
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                    booleanAnswers[question.id as keyof typeof booleanAnswers] === false
                      ? 'bg-red-500 text-white'
                      : 'bg-gray-200 text-gray-700 hover:bg-red-200'
                  }`}
                >
                  ‚ùå ‡§õ‡•à‡§® / No
                </button>
                
                <button
                  type="button"
                  onClick={() => handleBooleanChange(question.id, null)}
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                    booleanAnswers[question.id as keyof typeof booleanAnswers] === null
                      ? 'bg-gray-500 text-white'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  ü§∑ ‡§•‡§æ‡§π‡§æ ‡§õ‡•à‡§® / N/A
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Additional Feedback Section */}
      <div className="mt-8 space-y-4">
        {/* Wait Reason */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§™‡§∞‡•ç‡§ñ‡§®‡•Å‡§ï‡•ã ‡§ï‡§æ‡§∞‡§£ (Why did you have to wait?)
          </label>
          <select
            value={textFeedback.wait_reason}
            onChange={(e) => setTextFeedback(prev => ({ ...prev, wait_reason: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç... (Select...)</option>
            {waitReasonOptions.map((option) => (
              <option key={option.id} value={option.id}>
                {option.nepali} ({option.english})
              </option>
            ))}
          </select>
        </div>

        {/* Suggestions */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§∏‡•Å‡§ù‡§æ‡§µ‡§π‡§∞‡•Ç (Suggestions)
          </label>
          <textarea
            value={textFeedback.suggestions}
            onChange={(e) => setTextFeedback(prev => ({ ...prev, suggestions: e.target.value }))}
            placeholder="‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø‡§≤‡§æ‡§à ‡§ï‡§∏‡§∞‡•Ä ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡§ø‡§®‡•ç‡§õ? (How can the office be improved?)"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            rows={3}
          />
        </div>

        {/* Complaints */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ó‡•Å‡§®‡§æ‡§∏‡•ã‡§π‡§∞‡•Ç (Complaints)
          </label>
          <textarea
            value={textFeedback.complaints}
            onChange={(e) => setTextFeedback(prev => ({ ...prev, complaints: e.target.value }))}
            placeholder="‡§ï‡•á ‡§ï‡•Å‡§®‡•à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§•‡§ø‡§Ø‡•ã? (Were there any problems?)"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            rows={3}
          />
        </div>
      </div>

      {/* Submit Button */}
      <div className="mt-8 text-center">
        <button
          onClick={handleSubmit}
          disabled={submitting || Object.values(ratings).some(rating => rating === 0)}
          className={`px-8 py-3 rounded-lg text-white font-bold text-lg transition-all duration-200 ${
            submitting || Object.values(ratings).some(rating => rating === 0)
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-blue-600 hover:bg-blue-700 transform hover:scale-105 shadow-lg'
          }`}
        >
          {submitting ? '‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§¶‡•à... (Submitting...)' : 'üì§ ‡§´‡§ø‡§°‡§¨‡•ç‡§Ø‡§æ‡§ï ‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (Submit Feedback)'}
        </button>
      </div>

      {/* Privacy Note */}
      <div className="mt-6 text-center text-xs text-gray-500">
        <p>üîí ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§õ‡•§ ‡§Ø‡•ã ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡§ø‡§®‡•á‡§õ‡•§</p>
        <p>üîí Your information is secure. It will only be used to improve government services.</p>
      </div>
    </div>
  );
};

export default RatingForm;